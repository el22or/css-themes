@use "sass:map";

@function recursive-map-merge($map1, $map2, $config:() ) {
  @if (type-of($map1) == map or (type-of($map1) == list and length($map1) == 0)) and (type-of($map2) == map or (type-of($map2) == list and length($map2) == 0)) {
    $result: $map1;
    @each $key, $value in $map2 {
      @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {
        $result: map-merge($result, ($key: recursive-map-merge(map-get($result, $key), $value)));
      }
      @else if (map-get($config, "merge-lists") and type-of(map-get($result, $key)) == list and type-of($value) == list) {
        $result: map-merge($result, ($key: join(map-get($result, $key), $value)));
      }
      @else {
        $result: map-merge($result, ($key: $value));
      }
    }
    @return $result;
  }
  @else {
    @warn "recursive-map-merge() expects it\'s parameters to be map types!";
    @return null;
  }
}

// $params: (
//   'map': (),
//   'key': 'string',
// )
@function color-shades($params: ()) {
  $map: map.get($params, 'map');
  $key: map.get($params, 'key');
  $colors: map.get($map, $key);
  $obj: ();
  // Iterate each color and create HSL keys.
  @each $name, $value in $colors {
    $h: hue($value);
    $s: saturation($value);
    $l: lightness($value);
    // Each color merge back to map.
    $obj: map.merge($obj, (
      #{$name}: #{$value},
      #{$name}-h: #{$h},
      #{$name}-s: #{$s},
      #{$name}-l: #{$l},
    ));
  }
  @return map.merge($map, ('#{$key}': $obj));
}

// $params: ()
// $default-params: ()
@function configure($params: (), $default-params: (
  'colors': (
    'primary': #87b5bb,
    'secondary': #bb87b0,
  )
)) {
  $config: recursive-map-merge($default-params, $params);
  // Set color shades to colors.
  $config: color-shades((
    'map': $config,
    'key': 'colors',
  ));
  @return $config;
}
